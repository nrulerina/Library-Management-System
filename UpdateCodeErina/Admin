
// Admin class
class Admin extends User {
    private static ArrayList<Admin> admins = new ArrayList<>();

    public Admin(String name, String email, String address, String phoneNumber, String memberID, String username, String password, Date dateOfBirth) {
        super(name, email, address, phoneNumber, memberID, username, password, dateOfBirth);
        admins.add(this);
    }

    public void showMenu() {
        while (true) {
            String[] options = {"Add Book", "Remove Book", "View All Books", "Logout"};
            int choice = JOptionPane.showOptionDialog(null, "Admin Menu:", "Library Management System", JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, options, options[0]);

            switch (choice) {
                case 0:
                    addBook();
                    break;
                case 1:
                    removeBook();
                    break;
                case 2:
                    viewAllBooks();
                    break;
                case 3:
                    JOptionPane.showMessageDialog(null, "Logged out successfully.");
                    return;
            }
        }
    }

    public void addBook() {
        String bookID = UUID.randomUUID().toString();
        String title = JOptionPane.showInputDialog("Enter book title:");
        String author = JOptionPane.showInputDialog("Enter book author:");
        String publisherName = JOptionPane.showInputDialog("Enter publisher name:");
        String publisherAddress = JOptionPane.showInputDialog("Enter publisher address:");
        String publisherEmail = JOptionPane.showInputDialog("Enter publisher email:");
        Publisher publisher = new Publisher(publisherName, publisherAddress, publisherEmail);

        new Book(bookID, title, author, publisher);
        JOptionPane.showMessageDialog(null, "Book added successfully.");
    }

    public void removeBook() {
        String bookID = JOptionPane.showInputDialog("Enter book ID to remove:");
        for (Book book : new ArrayList<>(Book.getInventory())) {
            if (book.getBookID().equals(bookID)) {
                Book.getInventory().remove(book);
                JOptionPane.showMessageDialog(null, "Book removed successfully.");
                return;
            }
        }
        JOptionPane.showMessageDialog(null, "Book not found.");
    }

    public void viewAllBooks() {
        StringBuilder bookList = new StringBuilder("Books in Library:\n");
        for (Book book : Book.getInventory()) {
            bookList.append(book.getTitle()).append(" (").append(book.getBookID()).append(")\n");
        }
        JOptionPane.showMessageDialog(null, bookList.toString(), "List of Books", JOptionPane.INFORMATION_MESSAGE);
    }

    public static ArrayList<Admin> getAdmins() {
        return admins;
    }
}
